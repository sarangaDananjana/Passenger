"""
Django settings for passenger project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv
import datetime
import requests
import pytz
import base64
import qrcode
import io
from bson import ObjectId
import jwt
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework import status
from rest_framework.authentication import get_authorization_header
from pymongo import MongoClient


load_dotenv('.env.local')
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

CSRF_TRUSTED_ORIGINS = os.getenv(
    "DJANGO_CSRF_TRUSTED_ORIGINS", "https://127.0.0.1").split(",")

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

tz = pytz.timezone("Asia/Colombo")
utc_timezone = pytz.utc

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

<<<<<<< HEAD

SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")
DATABASE = os.getenv("DATABASE")
GENIE_API_KEY = os.getenv("GENIE_API_KEY")
FIREBASE_CREDENTIALS_JSON = os.getenv("FIREBASE_CREDENTIALS_JSON")
NOTIFICATION_URL = os.getenv("NOTIFICATION_URL")

=======
GENIE_API_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBJZCI6IjQwZDc2YzY2LTkyM2YtNDg3Ni1hZjQ2LTFiMzE4MTcyYzQwNyIsImNvbXBhbnlJZCI6IjY3ZjM4ZjhhMmFjODllMDAwOGE0NDI5ZSIsImlhdCI6MTc0NDAxNTM1MiwiZXhwIjo0ODk5Njg4OTUyfQ.r_C21RRJfq2c_mEaHNlWoitPvWIaD-FPYQzoW9qV7Ug'
>>>>>>> 535cef2fce557f71027a1d27c9e1ef99456316d3

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False') == 'True'

<<<<<<< HEAD

ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS",
                          "127.0.0.1,localhost").split(',')
=======
ALLOWED_HOSTS = ['localhost', '127.0.0.1',
                 '18.136.198.120', '172.31.28.148', 'www.passenger.lk']
>>>>>>> 535cef2fce557f71027a1d27c9e1ef99456316d3


# Application definition

INSTALLED_APPS = [
    'django_prometheus',
    'rest_framework',
    'django_crontab',
    'passenger.apps.MongoAdminConfig',
    'passenger.apps.MongoAuthConfig',
    'passenger.apps.MongoContentTypesConfig',
    'whitenoise.runserver_nostatic',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
    'members',
    'bus_owners',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'passenger.metrics.PrometheusMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'passenger.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'passenger.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

client = MongoClient(DATABASE)
# Access your database (assuming the name is 'Passenger')
db = client['Passenger']
# Access the 'users' collection (or your actual collection name)
user_collection = db['Users']
bus_owner_collection = db['BusOwners']
bus_collection = db['Buses']

bookings_collection = db['Bookings']
bustrips_collection = db['BusTrips']
routes_collection = db['Routes']
app_version_collection = db["AppVersion"]
boarding_points_collection = db["BoardingPoints"]
FCM_TOKEN_collection = db["FCMTokens"]
admin_collection = db["Admin"]


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = BASE_DIR / "staticfiles"

STATICFILES_DIRS = [
    # Additional static file locations for development
    os.path.join(BASE_DIR, 'static')
]

MEDIA_URL = '/media/'  # URL to access media files
# Directory for uploaded media files
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django_mongodb_backend.fields.ObjectIdAutoField'

MIGRATION_MODULES = {
    'admin': 'mongo_migrations.admin',
    'auth': 'mongo_migrations.auth',
    'contenttypes': 'mongo_migrations.contenttypes',
}


JAZZMIN_SETTINGS = {
    "custom_css": "css/custom_admin.css",
    "site_title": "Passenger Admin",
    "site_header": "Passenger Admin",
    "site_brand": "Passenger",
    # "site_logo": "yourapp/logo.png",  # Replace with the path to your logo in the static directory
    "login_logo": None,
    "login_logo_dark": None,
    "site_logo_classes": "img-circle",
    "welcome_sign": "Welcome to Passenger Admin",
    "copyright": "Passenger Inc.",
    # Change to your relevant searchable model
    "search_model": "app_name.BoardingPoint",
    "user_avatar": None,

    # Customizations
    "show_sidebar": True,
    "navigation_expanded": True,
    "order_with_respect_to": ["auth", "app_name", "app_name.BoardingPoints", "app_name.BusRoute"],

    # Top menu links
    "topmenu_links": [
        {"name": "Home", "url": "admin:index",
            "permissions": ["auth.view_user"]},
        {"name": "Docs", "url": "https://docs.djangoproject.com/en/4.0/",
            "new_window": True},
    ],

    # Side menu icons
    "icons": {
        "auth": "fas fa-users-cog",
        "app_name.BusRoute": "fas fa-road",
        "app_name.BoardingPoints": "fas fa-map-marker-alt",
    },

    # Themes
    # Change this to try different themes (options: cerulean, cosmo, cyborg, etc.)
    "theme": "cyborg",
    "dark_mode_theme": None,  # Set a dark mode theme if needed
}


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False


CRONJOBS = [
    ('* * * * *', 'passenger.settings.test_corn'),

]


def create_admin_access_token(username, role):
    if role != "ADMIN":
        raise ValueError("Only ADMINs can get access tokens")

    admin = admin_collection.find_one({"username": username})
    if not admin:
        raise ValueError("Admin not found")

    token_version = admin.get("tokenVersion", 0)
    admin_id = admin.get("_id")
    now = datetime.datetime.now(tz)

    payload = {
        "user_id": str(admin_id),
        "role": "ADMIN",
        "type": "access",
        "tokenVersion": token_version,
        "exp": now + datetime.timedelta(minutes=30),
        "iat": now,
    }
    return jwt.encode(payload, SECRET_KEY, algorithm="HS256")


def create_admin_refresh_token(username, role):
    if role != "ADMIN":
        raise ValueError("Only ADMINs can get refresh tokens")

    admin = admin_collection.find_one({"username": username})
    if not admin:
        raise ValueError("Admin not found")

    token_version = admin.get("tokenVersion", 0)
    admin_id = admin.get("_id")
    now = datetime.datetime.now(tz)

    payload = {
        "user_id": str(admin_id),
        "role": "ADMIN",
        "type": "refresh",
        "tokenVersion": token_version,
        "exp": now + datetime.timedelta(minutes=30),
        "iat": now,
    }
    return jwt.encode(payload, SECRET_KEY, algorithm="HS256")


def validate_admin_token(access_token):
    try:
        payload = jwt.decode(access_token, SECRET_KEY, algorithms=["HS256"])
    except (jwt.ExpiredSignatureError, jwt.InvalidTokenError):
        return None  # Token expired or invalid

    # Must be an access token for an ADMIN
    if payload.get("type") != "access" or payload.get("role") != "ADMIN":
        return None

    user_id_str = payload.get("user_id")
    if not user_id_str:
        return None

    admin = admin_collection.find_one({"_id": ObjectId(user_id_str)})
    if not admin or admin.get("tokenVersion", 0) != payload.get("tokenVersion", 0):
        return None

    return user_id_str


def create_access_token(phone_number, role):

    if role == "USER":
        user = user_collection.find_one({"phone_number": phone_number})

        tokenVersion = user.get('tokenVersion')
        user_id = user.get('_id')
        local_time = datetime.datetime.now(tz)
        now = local_time.astimezone(utc_timezone)

        payload = {
            'user_id': str(user_id),
            'role': 'USER',
            'type': 'access',
            'tokenVersion': tokenVersion,
            'exp': now + datetime.timedelta(minutes=30),
            'iat': now,
        }
        token = jwt.encode(payload, SECRET_KEY, algorithm='HS256')
        return token

    if role == "OWNER":
        user = bus_owner_collection.find_one({"phone_number": phone_number})

        tokenVersion = user.get('tokenVersion')
        owner_id = user.get('_id')
        local_time = datetime.datetime.now(tz)
        now = local_time.astimezone(utc_timezone)

        payload = {
            'user_id': str(owner_id),
            'role': 'OWNER',
            'type': 'access',
            'tokenVersion': tokenVersion,
            'exp': now + datetime.timedelta(minutes=30),
            'iat': now,
        }
        token = jwt.encode(payload, SECRET_KEY, algorithm='HS256')

        # payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])
        # print(payload)
        return token


def create_refresh_token(phone_number, role):

    if role == "USER":
        user = user_collection.find_one({"phone_number": phone_number})

        tokenVersion = user.get('tokenVersion')
        user_id = user.get('_id')
        local_time = datetime.datetime.now(tz)
        now = local_time.astimezone(utc_timezone)

        payload = {
            'user_id': str(user_id),
            'role': 'USER',
            'type': 'refresh',
            'tokenVersion': tokenVersion,
            'exp': now + datetime.timedelta(days=7),
            'iat': now,
        }
        token = jwt.encode(payload, SECRET_KEY, algorithm='HS256')

        return token

    if role == "OWNER":
        user = bus_owner_collection.find_one({"phone_number": phone_number})

        tokenVersion = user.get('tokenVersion')
        owner_id = user.get('_id')
        local_time = datetime.datetime.now(tz)
        now = local_time.astimezone(utc_timezone)

        payload = {
            'user_id': str(owner_id),
            'role': 'OWNER',
            'type': 'refresh',
            'tokenVersion': tokenVersion,
            'exp': now + datetime.timedelta(days=7),
            'iat': now,
        }
        token = jwt.encode(payload, SECRET_KEY, algorithm='HS256')

        # payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])
        # print(payload)
        return token


@api_view(["POST"])
def refresh_tokens(request):
    '''
    {"refresh_token":"<YOUR_REFRESH_TOKEN>"}
    '''
    # 1) grab the raw refresh token from the POST body
    refresh_token = request.data.get("refresh_token")
    if not refresh_token:
        return Response(
            {"error": "Missing refresh_token"},
            status=status.HTTP_400_BAD_REQUEST
        )

    # 2) decode & verify
    try:
        payload = jwt.decode(refresh_token, SECRET_KEY, algorithms=["HS256"])
    except jwt.ExpiredSignatureError:
        return Response(
            {"error_code": "REFRESH_TOKEN_EXPIRED",
             "error_message": "Refresh token has expired"},
            status=status.HTTP_401_UNAUTHORIZED
        )
    except jwt.InvalidTokenError:
        return Response(
            {"error_code": "INVALID_REFRESH_TOKEN",
             "error_message": "Invalid refresh token"},
            status=status.HTTP_401_UNAUTHORIZED
        )

    # 3) ensure it’s a refresh token
    if payload.get("type") != "refresh":
        return Response(
            {"error_code": "INVALID_TOKEN_TYPE",
             "error_message": "Token is not a refresh token"},
            status=status.HTTP_400_BAD_REQUEST
        )

    # 4) extract phone_number, role, tokenVersion
    user_id = payload.get("user_id")
    role = payload.get("role")
    token_version = payload.get("tokenVersion", 0)
    if not user_id or not role:
        return Response(
            {"error_code": "INVALID_PAYLOAD",
             "error_message": "Refresh token payload missing data"},
            status=status.HTTP_400_BAD_REQUEST
        )

    # 5) fetch the user doc
    coll = user_collection if role == "USER" else bus_owner_collection
    user = coll.find_one({"_id": ObjectId(user_id)})
    if not user:
        return Response(
            {"error_code": "USER_NOT_FOUND",
             "error_message": "User not found"},
            status=status.HTTP_404_NOT_FOUND
        )

    # 6) verify tokenVersion
    if user.get("tokenVersion", 0) != token_version:
        return Response(
            {"error_code": "TOKEN_VERSION_MISMATCH",
             "error_message": "Token version mismatch"},
            status=status.HTTP_401_UNAUTHORIZED
        )

    # 7) issue new tokens
    phone_number = user.get('phone_number')
    new_access = create_access_token(phone_number, role)
    new_refresh = create_refresh_token(phone_number, role)

    return Response(
        {"access": new_access, "refresh": new_refresh},
        status=status.HTTP_200_OK
    )


def validate_token(access_token):
    try:
        payload = jwt.decode(access_token, SECRET_KEY, algorithms=['HS256'])
        if payload.get('type') != 'access':
            return None  # Not an access token

        user_id_str = payload.get('user_id')
        if not user_id_str:
            return None

        if payload.get('role') == 'USER':

            user = user_collection.find_one({"_id": ObjectId(user_id_str)})
            if user is None or user.get('tokenVersion', 0) != payload.get('tokenVersion', 0):
                return None  # User not found or token version mismatch

            return user_id_str  # Return user details instead of just payload

        if payload.get('role') == 'OWNER':

            user = bus_owner_collection.find_one(
                {"_id": ObjectId(user_id_str)})
            if user is None or user.get('tokenVersion', 0) != payload.get('tokenVersion', 0):
                return None  # User not found or token version mismatch

            return user_id_str  # Return user details instead of just payload

    except (jwt.ExpiredSignatureError, jwt.InvalidTokenError):
        return None  # Token expired or invalid


@api_view(["POST"])
def logout(request):
    """
    {
"refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjgyZGVkNzk5MDhiMDE3YTA2N2ZlOWE5Iiwicm9sZSI6Ik9XTkVSIiwidHlwZSI6InJlZnJlc2giLCJ0b2tlblZlcnNpb24iOjEuMCwiZXhwIjoxNzQ5MDA5NDM5LCJpYXQiOjE3NDg0MDQ2Mzl9.n_LtqOxJ2rarTTKLwxrhjJjYl5HkLQvORFRuScUXt3A"
}
    """

    refresh_token = request.data.get('refresh_token')

    payload = jwt.decode(refresh_token, SECRET_KEY, algorithms=['HS256'])
    user_id_str = payload.get('user_id')

    role = payload.get('role')

    coll = user_collection if role == "USER" else bus_owner_collection

    user = coll.find_one({"_id": ObjectId(user_id_str)})
    if user:
        new_version = int(user.get('tokenVersion')) + 1
        coll.update_one(
            {"_id": ObjectId(user_id_str)},
            {"$set": {"tokenVersion": int(new_version)}}
        )
        return Response(
            {"successfully Logged Out"},
            status=status.HTTP_200_OK
        )

    else:
        return Response(
            {"User Not Found"},
            status=status.HTTP_404_NOT_FOUND
        )

    # Increment token version to invalidate all existing tokens


def get_access_token_from_request(request):
    """Extract the access token from Authorization header"""
    auth = get_authorization_header(request).split()
    if not auth or auth[0].lower() != b'bearer' or len(auth) != 2:
        return None

    access_token = auth[1].decode('utf-8')
    return access_token


def generate_qr_code_base64(data: str) -> str:
    qr = qrcode.QRCode(box_size=10, border=4)
    qr.add_data(data)
    qr.make(fit=True)

    img = qr.make_image(fill_color="black", back_color="white")

    buffered = io.BytesIO()
    img.save(buffered, format="PNG")
    img_str = base64.b64encode(buffered.getvalue()).decode("utf-8")

    return img_str


@api_view(['POST'])
def validate_machine(request):
    """
    {
    "token": "jwt_token_here"
    }
    """
    token = request.data.get('token')
    if not token:
        return Response({"error": "Token is required"}, status=400)

    try:
        # Decode the JWT to get the payload
        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])

        # Extract bus_id and tokenVersion from the payload
        bus_id_from_key = payload.get("bus_id")
        token_version_from_key = payload.get("tokenVersion")

        if not bus_id_from_key or not token_version_from_key:
            return Response({"error": "Invalid token payload"}, status=400)

        # Get the bus from the database by bus_id
        bus = bus_collection.find_one({"_id": ObjectId(bus_id_from_key)})
        if not bus:
            return Response({"error": "Bus not found"}, status=404)

        # Check the tokenVersion in the database
        db_token_version = bus.get('tokenVersion')

        # Compare tokenVersion
        if db_token_version and db_token_version > token_version_from_key:
            return Response({"error": "Authentication failed. Token version is higher than the provided token version."}, status=403)

        return Response({
            "message": "Authentication successful",
            "bus_id": bus_id_from_key  # added field
        })

    except jwt.InvalidTokenError:
        return Response({"error": "Invalid token"}, status=400)
